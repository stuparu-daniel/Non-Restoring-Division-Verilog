/* Generated by Yosys 0.9 (git sha1 UNKNOWN, clang 3.4.2 -fPIC -Os) */

(* src = "design.sv:116" *)
module FAC(x, y, c_in, z, c_out);
  (* src = "design.sv:122" *)
  wire _00_;
  (* src = "design.sv:122" *)
  wire _01_;
  (* src = "design.sv:122" *)
  wire _02_;
  (* src = "design.sv:122" *)
  wire _03_;
  (* src = "design.sv:121" *)
  wire _04_;
  (* src = "design.sv:117" *)
  input c_in;
  (* src = "design.sv:118" *)
  output c_out;
  (* src = "design.sv:117" *)
  input x;
  (* src = "design.sv:117" *)
  input y;
  (* src = "design.sv:118" *)
  output z;
  assign _00_ = x & (* src = "design.sv:122" *) y;
  assign _01_ = x & (* src = "design.sv:122" *) c_in;
  assign _02_ = y & (* src = "design.sv:122" *) c_in;
  assign _03_ = _00_ | (* src = "design.sv:122" *) _01_;
  assign c_out = _03_ | (* src = "design.sv:122" *) _02_;
  assign _04_ = x ^ (* src = "design.sv:121" *) y;
  assign z = _04_ ^ (* src = "design.sv:121" *) c_in;
endmodule

(* src = "design.sv:172" *)
module control_unit(clk, rst, begin_div, sign, cnt7, ld_a, ld_m, ld_q, ld_sign, operation, left, set_lsb, ld_sum, increment, fin);
  (* src = "design.sv:210" *)
  wire _000_;
  (* src = "design.sv:210" *)
  wire _001_;
  (* src = "design.sv:210" *)
  wire _002_;
  (* src = "design.sv:210" *)
  wire _003_;
  (* src = "design.sv:210" *)
  wire _004_;
  (* src = "design.sv:210" *)
  wire _005_;
  (* src = "design.sv:210" *)
  wire _006_;
  (* src = "design.sv:210" *)
  wire _007_;
  (* src = "design.sv:210" *)
  wire _008_;
  (* src = "design.sv:210" *)
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire [10:0] _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  (* src = "design.sv:174" *)
  input begin_div;
  (* src = "design.sv:173" *)
  input clk;
  (* src = "design.sv:175" *)
  input cnt7;
  (* init = 1'h0 *)
  (* src = "design.sv:185" *)
  output fin;
  reg fin = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:184" *)
  output increment;
  reg increment = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:176" *)
  output ld_a;
  reg ld_a = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:177" *)
  output ld_m;
  reg ld_m = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:178" *)
  output ld_q;
  reg ld_q = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:179" *)
  output ld_sign;
  reg ld_sign = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:183" *)
  output ld_sum;
  reg ld_sum = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:181" *)
  output left;
  reg left = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:180" *)
  output operation;
  reg operation = 1'h0;
  (* src = "design.sv:173" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "design.sv:182" *)
  output set_lsb;
  reg set_lsb = 1'h0;
  (* src = "design.sv:175" *)
  input sign;
  (* onehot = 32'd1 *)
  reg [10:0] state_reg;
  assign _010_ = _020_ & state_reg[0];
  assign _011_ = _021_ & state_reg[7];
  assign _012_ = _022_ & state_reg[7];
  assign _013_ = cnt7 & state_reg[8];
  assign _014_ = _023_ & state_reg[2];
  assign _015_ = begin_div & state_reg[0];
  assign _016_ = _024_ & state_reg[7];
  assign _017_ = sign & state_reg[2];
  assign _018_ = _021_ & state_reg[8];
  assign _019_[0] = | { state_reg[4], _010_ };
  assign _019_[1] = | { _011_, state_reg[9] };
  assign _019_[4] = | { _012_, _013_ };
  assign _019_[8] = | { _017_, _016_ };
  assign _019_[10] = | { state_reg[5], _018_ };
  always @(posedge clk or negedge rst)
    if (!rst)
      state_reg <= 11'h001;
    else
      state_reg <= { _019_[10], state_reg[3], _019_[8], state_reg[10], _015_, _014_, _019_[4], state_reg[6], state_reg[1], _019_[1:0] };
  assign _020_ = ~ begin_div;
  assign _022_ = { cnt7, sign } == 2'h2;
  assign _023_ = ~ sign;
  assign _024_ = { cnt7, sign } == 2'h3;
  assign _021_ = ~ cnt7;
  assign _025_ = | { state_reg[4], state_reg[5], state_reg[8], state_reg[10] };
  assign _026_ = | { state_reg[5], state_reg[8] };
  assign _027_ = | { state_reg[5], state_reg[7] };
  assign _028_ = | { state_reg[4], state_reg[7], state_reg[10] };
  assign _035_ = ~ (* src = "design.sv:210" *) state_reg[2];
  assign _029_ = ~ (* src = "design.sv:210" *) state_reg[8];
  assign _030_ = ~ (* src = "design.sv:210" *) state_reg[5];
  assign _031_ = ~ (* src = "design.sv:210" *) state_reg[10];
  assign _032_ = ~ (* src = "design.sv:210" *) state_reg[7];
  assign _033_ = ~ (* src = "design.sv:210" *) state_reg[4];
  assign _037_ = ~ (* src = "design.sv:210" *) state_reg[1];
  assign _040_ = ~ (* src = "design.sv:210" *) state_reg[3];
  assign _041_ = ~ (* src = "design.sv:210" *) state_reg[9];
  assign _047_ = ~ (* src = "design.sv:210" *) state_reg[0];
  assign _043_ = ~ (* src = "design.sv:210" *) state_reg[6];
  assign _057_ = | (* src = "design.sv:210" *) { _070_, _072_ };
  assign _059_ = | (* src = "design.sv:210" *) { _073_, _074_ };
  assign _055_ = | (* src = "design.sv:210" *) { _021_, _071_ };
  assign _066_ = | (* src = "design.sv:210" *) { _072_, _075_ };
  assign _068_ = | (* src = "design.sv:210" *) { _074_, _076_ };
  assign _069_ = | (* src = "design.sv:210" *) { _077_, _078_ };
  assign _049_ = _032_ & (* src = "design.sv:210" *) _033_;
  assign _050_ = _031_ & (* src = "design.sv:210" *) _049_;
  assign _051_ = _030_ & (* src = "design.sv:210" *) _050_;
  assign _052_ = _029_ & (* src = "design.sv:210" *) _051_;
  assign _070_ = _035_ & (* src = "design.sv:210" *) _052_;
  assign _053_ = cnt7 & (* src = "design.sv:210" *) _023_;
  assign _072_ = state_reg[7] & (* src = "design.sv:210" *) _056_;
  assign _073_ = _037_ & (* src = "design.sv:210" *) _049_;
  assign _058_ = state_reg[7] & (* src = "design.sv:210" *) cnt7;
  assign _060_ = _029_ & (* src = "design.sv:210" *) _030_;
  assign _061_ = _035_ & (* src = "design.sv:210" *) _060_;
  assign _062_ = _040_ & (* src = "design.sv:210" *) _041_;
  assign _063_ = _043_ & (* src = "design.sv:210" *) _040_;
  assign _064_ = _030_ & (* src = "design.sv:210" *) _032_;
  assign _065_ = _029_ & (* src = "design.sv:210" *) _064_;
  assign _075_ = _035_ & (* src = "design.sv:210" *) _065_;
  assign _054_ = state_reg[7] & (* src = "design.sv:210" *) _053_;
  assign _071_ = cnt7 & (* src = "design.sv:210" *) _054_;
  assign _056_ = state_reg[7] & (* src = "design.sv:210" *) _055_;
  assign _067_ = _037_ & (* src = "design.sv:210" *) _032_;
  assign _076_ = _041_ & (* src = "design.sv:210" *) _067_;
  assign _074_ = state_reg[7] & (* src = "design.sv:210" *) _058_;
  assign _077_ = _047_ & (* src = "design.sv:210" *) _043_;
  assign _078_ = state_reg[0] & (* src = "design.sv:210" *) _010_;
  always @*
    if (_034_)
      set_lsb = _008_;
  assign _034_ = ~ _052_;
  always @*
    if (_036_)
      ld_sum = _005_;
  assign _036_ = ~ _057_;
  always @*
    if (_038_)
      increment = _000_;
  assign _038_ = ~ _059_;
  always @*
    if (_039_)
      ld_sign = _004_;
  assign _039_ = ~ _061_;
  always @*
    if (_042_)
      ld_m = _002_;
  assign _042_ = ~ _062_;
  always @*
    if (_044_)
      ld_q = _003_;
  assign _044_ = ~ _063_;
  always @*
    if (_045_)
      operation = _007_;
  assign _045_ = ~ _066_;
  always @*
    if (_046_)
      left = _006_;
  assign _046_ = ~ _068_;
  always @*
    if (_048_)
      ld_a = _001_;
  assign _048_ = ~ _069_;
  always @*
    if (state_reg[4])
      fin = 1'h1;
  assign _009_ = sign ? (* full_case = 32'd1 *) (* src = "design.sv:256" *) 1'h1 : 1'h0;
  assign _001_ = state_reg[6] ? (* full_case = 32'd1 *) (* src = "design.sv:224|design.sv:213" *) 1'h0 : 1'h1;
  assign _006_ = state_reg[1] ? (* full_case = 32'd1 *) (* src = "design.sv:297|design.sv:213" *) 1'h0 : 1'h1;
  function [0:0] _166_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "design.sv:297|design.sv:213" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _166_ = b[0:0];
      2'b1?:
        _166_ = b[1:1];
      default:
        _166_ = a;
    endcase
  endfunction
  assign _007_ = _166_(_009_, 2'h1, { state_reg[8], _027_ });
  assign _003_ = state_reg[3] ? (* full_case = 32'd1 *) (* src = "design.sv:231|design.sv:213" *) 1'h0 : 1'h1;
  assign _002_ = state_reg[9] ? (* full_case = 32'd1 *) (* src = "design.sv:238|design.sv:213" *) 1'h0 : 1'h1;
  assign _004_ = _026_ ? (* full_case = 32'd1 *) (* src = "design.sv:281|design.sv:213" *) 1'h0 : 1'h1;
  assign _000_ = state_reg[7] ? (* full_case = 32'd1 *) (* src = "design.sv:317|design.sv:213" *) 1'h1 : 1'h0;
  assign _005_ = _025_ ? (* full_case = 32'd1 *) (* src = "design.sv:317|design.sv:213" *) 1'h0 : 1'h1;
  assign _008_ = _028_ ? (* full_case = 32'd1 *) (* src = "design.sv:317|design.sv:213" *) 1'h0 : 1'h1;
  assign { _019_[9], _019_[7:5], _019_[3:2] } = { state_reg[3], state_reg[10], _015_, _014_, state_reg[6], state_reg[1] };
endmodule

(* src = "design.sv:332" *)
module non_res_div_3_0(in_bus, begin_div, clk, rst, fin, out_bus);
  (* src = "design.sv:365" *)
  wire _0_;
  (* src = "design.sv:340" *)
  wire [7:0] a;
  (* src = "design.sv:334" *)
  input begin_div;
  (* src = "design.sv:335" *)
  input clk;
  (* src = "design.sv:355" *)
  wire cnt7;
  (* src = "design.sv:344" *)
  (* unused_bits = "0 1 2" *)
  wire [2:0] count;
  (* src = "design.sv:336" *)
  output fin;
  (* src = "design.sv:356" *)
  wire finish;
  (* src = "design.sv:333" *)
  input [7:0] in_bus;
  (* src = "design.sv:354" *)
  wire increment;
  (* src = "design.sv:346" *)
  wire ld_a;
  (* src = "design.sv:348" *)
  wire ld_m;
  (* src = "design.sv:347" *)
  wire ld_q;
  (* src = "design.sv:349" *)
  wire ld_sign;
  (* src = "design.sv:352" *)
  wire ld_sum;
  (* src = "design.sv:345" *)
  wire left;
  (* src = "design.sv:342" *)
  wire [7:0] m;
  (* src = "design.sv:357" *)
  wire operation;
  (* src = "design.sv:358" *)
  wire [7:0] out;
  (* src = "design.sv:337" *)
  output [7:0] out_bus;
  (* src = "design.sv:341" *)
  wire [7:0] q;
  (* src = "design.sv:343" *)
  wire [7:0] rez;
  (* src = "design.sv:335" *)
  input rst;
  (* src = "design.sv:353" *)
  wire set_lsb;
  (* src = "design.sv:350" *)
  wire sign_in;
  (* src = "design.sv:351" *)
  wire sign_out;
  assign _0_ = ~ (* src = "design.sv:365" *) sign_in;
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:373" *)
  control_unit cu (
    .begin_div(begin_div),
    .clk(clk),
    .cnt7(cnt7),
    .fin(fin),
    .increment(increment),
    .ld_a(ld_a),
    .ld_m(ld_m),
    .ld_q(ld_q),
    .ld_sign(ld_sign),
    .ld_sum(ld_sum),
    .left(left),
    .operation(operation),
    .rst(rst),
    .set_lsb(set_lsb),
    .sign(sign_in)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:361" *)
  reg_sign inst0 (
    .clk(clk),
    .in(sign_out),
    .ld(ld_sign),
    .rez(sign_in),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:363" *)
  reg_a inst1 (
    .clk(clk),
    .in_bus(in_bus),
    .ld_in_bus(ld_a),
    .ld_sum(ld_sum),
    .left_shift(left),
    .lsb(q[7]),
    .rez(a),
    .rst(rst),
    .sum(rez)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:365" *)
  reg_q inst2 (
    .clk(clk),
    .in_bus(in_bus),
    .ld_in_bus(ld_q),
    .left_shift(left),
    .lsb(_0_),
    .rez(q),
    .rst(rst),
    .set_lsb(set_lsb)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:367" *)
  reg_m inst3 (
    .clk(clk),
    .in_bus(in_bus),
    .ld_in_bus(ld_m),
    .rez(m),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:369" *)
  reg_counter inst4 (
    .clk(clk),
    .count_is_7(cnt7),
    .increment(increment),
    .rez(count),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:376" *)
  reg_out inst5 (
    .clk(clk),
    .in1(a),
    .in2(q),
    .ld_in_bus(fin),
    .rez(out),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:371" *)
  parallel_adder_subtractor pa (
    .operation_type(operation),
    .result(rez),
    .sign_in(sign_in),
    .sign_out(sign_out),
    .x(a),
    .y(m)
  );
  assign finish = fin;
  assign out_bus = out;
endmodule

(* src = "design.sv:126" *)
module parallel_adder_subtractor(operation_type, sign_in, x, y, result, sign_out);
  (* src = "design.sv:151" *)
  wire _00_;
  (* src = "design.sv:151" *)
  wire _01_;
  (* src = "design.sv:151" *)
  wire _02_;
  (* src = "design.sv:151" *)
  wire _03_;
  (* src = "design.sv:151" *)
  wire _04_;
  (* src = "design.sv:151" *)
  wire _05_;
  (* src = "design.sv:151" *)
  wire _06_;
  (* src = "design.sv:151" *)
  wire _07_;
  (* src = "design.sv:151" *)
  wire _08_;
  (* src = "design.sv:151" *)
  wire _09_;
  (* src = "design.sv:151" *)
  wire _10_;
  (* src = "design.sv:151" *)
  wire _11_;
  (* src = "design.sv:151" *)
  wire _12_;
  (* src = "design.sv:151" *)
  wire _13_;
  (* src = "design.sv:151" *)
  wire _14_;
  (* src = "design.sv:151" *)
  wire _15_;
  (* src = "design.sv:151" *)
  wire _16_;
  (* src = "design.sv:135" *)
  (* unused_bits = "9" *)
  wire [9:0] carries;
  (* src = "design.sv:127" *)
  input operation_type;
  (* src = "design.sv:131" *)
  output [7:0] result;
  (* src = "design.sv:128" *)
  input sign_in;
  (* src = "design.sv:132" *)
  output sign_out;
  (* src = "design.sv:136" *)
  wire [8:0] sum;
  (* src = "design.sv:129" *)
  input [7:0] x;
  (* src = "design.sv:138" *)
  wire [8:0] x_ext;
  (* src = "design.sv:130" *)
  input [7:0] y;
  (* src = "design.sv:139" *)
  wire [8:0] y_ext;
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _17_ (
    .c_in(carries[0]),
    .c_out(carries[1]),
    .x(x[0]),
    .y(_08_),
    .z(sum[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _18_ (
    .c_in(carries[1]),
    .c_out(carries[2]),
    .x(x[1]),
    .y(_09_),
    .z(sum[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _19_ (
    .c_in(carries[2]),
    .c_out(carries[3]),
    .x(x[2]),
    .y(_10_),
    .z(sum[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _20_ (
    .c_in(carries[3]),
    .c_out(carries[4]),
    .x(x[3]),
    .y(_11_),
    .z(sum[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _21_ (
    .c_in(carries[4]),
    .c_out(carries[5]),
    .x(x[4]),
    .y(_12_),
    .z(sum[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _22_ (
    .c_in(carries[5]),
    .c_out(carries[6]),
    .x(x[5]),
    .y(_13_),
    .z(sum[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _23_ (
    .c_in(carries[6]),
    .c_out(carries[7]),
    .x(x[6]),
    .y(_14_),
    .z(sum[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _24_ (
    .c_in(carries[7]),
    .c_out(carries[8]),
    .x(x[7]),
    .y(_15_),
    .z(sum[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151" *)
  FAC _25_ (
    .c_in(carries[8]),
    .c_out(carries[9]),
    .x(sign_in),
    .y(_16_),
    .z(sign_out)
  );
  assign carries[0] = ~ (* src = "design.sv:141" *) operation_type;
  assign _00_ = ~ (* src = "design.sv:151" *) y[0];
  assign _01_ = ~ (* src = "design.sv:151" *) y[1];
  assign _02_ = ~ (* src = "design.sv:151" *) y[2];
  assign _03_ = ~ (* src = "design.sv:151" *) y[3];
  assign _04_ = ~ (* src = "design.sv:151" *) y[4];
  assign _05_ = ~ (* src = "design.sv:151" *) y[5];
  assign _06_ = ~ (* src = "design.sv:151" *) y[6];
  assign _07_ = ~ (* src = "design.sv:151" *) y[7];
  assign _08_ = operation_type ? (* src = "design.sv:151" *) y[0] : _00_;
  assign _09_ = operation_type ? (* src = "design.sv:151" *) y[1] : _01_;
  assign _10_ = operation_type ? (* src = "design.sv:151" *) y[2] : _02_;
  assign _11_ = operation_type ? (* src = "design.sv:151" *) y[3] : _03_;
  assign _12_ = operation_type ? (* src = "design.sv:151" *) y[4] : _04_;
  assign _13_ = operation_type ? (* src = "design.sv:151" *) y[5] : _05_;
  assign _14_ = operation_type ? (* src = "design.sv:151" *) y[6] : _06_;
  assign _15_ = operation_type ? (* src = "design.sv:151" *) y[7] : _07_;
  assign _16_ = operation_type ? (* src = "design.sv:151" *) 1'h0 : 1'h1;
  assign result = sum[7:0];
  assign sum[8] = sign_out;
  assign x_ext = { sign_in, x };
  assign y_ext = { 1'h0, y };
endmodule

(* src = "design.sv:29" *)
module reg_a(clk, rst, ld_in_bus, ld_sum, left_shift, lsb, in_bus, sum, rez);
  (* src = "design.sv:36" *)
  wire [7:0] _00_;
  wire [6:0] _01_;
  wire [6:0] _02_;
  wire _03_;
  wire _04_;
  (* src = "design.sv:30" *)
  input clk;
  (* src = "design.sv:31" *)
  input [7:0] in_bus;
  (* src = "design.sv:30" *)
  input ld_in_bus;
  (* src = "design.sv:30" *)
  input ld_sum;
  (* src = "design.sv:30" *)
  input left_shift;
  (* src = "design.sv:30" *)
  input lsb;
  (* src = "design.sv:33" *)
  output [7:0] rez;
  reg [7:0] rez;
  (* src = "design.sv:30" *)
  input rst;
  (* src = "design.sv:32" *)
  input [7:0] sum;
  always @(posedge clk or negedge rst)
    if (!rst)
      rez <= 8'h00;
    else
      rez <= _00_;
  assign _01_ = left_shift ? (* src = "design.sv:44" *) rez[6:0] : rez[7:1];
  assign _02_ = ld_sum ? (* full_case = 32'd1 *) (* src = "design.sv:41" *) sum[7:1] : _01_;
  assign _00_[7:1] = ld_in_bus ? (* full_case = 32'd1 *) (* src = "design.sv:38" *) in_bus[7:1] : _02_;
  assign _03_ = left_shift ? (* src = "design.sv:44" *) lsb : rez[0];
  assign _04_ = ld_sum ? (* full_case = 32'd1 *) (* src = "design.sv:41" *) sum[0] : _03_;
  assign _00_[0] = ld_in_bus ? (* full_case = 32'd1 *) (* src = "design.sv:38" *) in_bus[0] : _04_;
endmodule

(* src = "design.sv:94" *)
module reg_counter(clk, rst, increment, rez, count_is_7);
  (* src = "design.sv:100" *)
  wire _00_;
  (* src = "design.sv:100" *)
  wire [2:0] _01_;
  (* src = "design.sv:110" *)
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _02_;
  (* src = "design.sv:105" *)
  wire _03_;
  wire [2:0] _04_;
  (* src = "design.sv:95" *)
  input clk;
  (* src = "design.sv:97" *)
  output count_is_7;
  reg count_is_7;
  (* src = "design.sv:95" *)
  input increment;
  (* src = "design.sv:96" *)
  output [2:0] rez;
  reg [2:0] rez;
  (* src = "design.sv:95" *)
  input rst;
  assign _02_ = rez + (* src = "design.sv:110" *) 32'd1;
  assign _03_ = rez == (* src = "design.sv:105" *) 3'h7;
  always @(posedge clk or negedge rst)
    if (!rst)
      rez <= 3'h0;
    else
      rez <= _01_;
  always @(posedge clk or negedge rst)
    if (!rst)
      count_is_7 <= 1'h0;
    else
      count_is_7 <= _00_;
  assign _00_ = _03_ ? (* full_case = 32'd1 *) (* src = "design.sv:105" *) 1'h1 : count_is_7;
  assign _04_ = increment ? (* src = "design.sv:109" *) _02_[2:0] : rez;
  assign _01_ = _03_ ? (* full_case = 32'd1 *) (* src = "design.sv:105" *) 3'h0 : _04_;
endmodule

(* src = "design.sv:2" *)
module reg_m(clk, rst, ld_in_bus, in_bus, rez);
  (* src = "design.sv:7" *)
  wire [7:0] _0_;
  (* src = "design.sv:3" *)
  input clk;
  (* src = "design.sv:4" *)
  input [7:0] in_bus;
  (* src = "design.sv:3" *)
  input ld_in_bus;
  (* src = "design.sv:5" *)
  output [7:0] rez;
  reg [7:0] rez;
  (* src = "design.sv:3" *)
  input rst;
  always @(posedge clk or negedge rst)
    if (!rst)
      rez <= 8'h00;
    else
      rez <= _0_;
  assign _0_ = ld_in_bus ? (* src = "design.sv:9" *) in_bus : rez;
endmodule

(* src = "design.sv:52" *)
module reg_out(clk, rst, ld_in_bus, in1, in2, rez);
  (* src = "design.sv:61" *)
  wire _0_;
  (* src = "design.sv:61" *)
  wire [7:0] _1_;
  wire _2_;
  wire [7:0] _3_;
  (* src = "design.sv:59" *)
  reg aux;
  (* src = "design.sv:53" *)
  input clk;
  (* src = "design.sv:54" *)
  input [7:0] in1;
  (* src = "design.sv:55" *)
  input [7:0] in2;
  (* src = "design.sv:53" *)
  input ld_in_bus;
  (* src = "design.sv:56" *)
  output [7:0] rez;
  reg [7:0] rez;
  (* src = "design.sv:53" *)
  input rst;
  always @(posedge clk or negedge rst)
    if (!rst)
      rez <= 8'h00;
    else
      rez <= _1_;
  always @(posedge clk or negedge rst)
    if (!rst)
      aux <= 1'h0;
    else
      aux <= _0_;
  assign _2_ = aux ? (* full_case = 32'd1 *) (* src = "design.sv:67" *) 1'h0 : 1'h1;
  assign _0_ = ld_in_bus ? (* src = "design.sv:66" *) _2_ : aux;
  assign _3_ = aux ? (* full_case = 32'd1 *) (* src = "design.sv:67" *) in2 : in1;
  assign _1_ = ld_in_bus ? (* src = "design.sv:66" *) _3_ : rez;
endmodule

(* src = "design.sv:12" *)
module reg_q(clk, rst, ld_in_bus, left_shift, set_lsb, lsb, in_bus, rez);
  (* src = "design.sv:18" *)
  wire [7:0] _0_;
  wire [6:0] _1_;
  wire _2_;
  wire _3_;
  (* src = "design.sv:13" *)
  input clk;
  (* src = "design.sv:14" *)
  input [7:0] in_bus;
  (* src = "design.sv:13" *)
  input ld_in_bus;
  (* src = "design.sv:13" *)
  input left_shift;
  (* src = "design.sv:13" *)
  input lsb;
  (* src = "design.sv:15" *)
  output [7:0] rez;
  reg [7:0] rez;
  (* src = "design.sv:13" *)
  input rst;
  (* src = "design.sv:13" *)
  input set_lsb;
  always @(posedge clk or negedge rst)
    if (!rst)
      rez <= 8'h00;
    else
      rez <= _0_;
  assign _1_ = left_shift ? (* full_case = 32'd1 *) (* src = "design.sv:21" *) rez[6:0] : rez[7:1];
  assign _0_[7:1] = ld_in_bus ? (* full_case = 32'd1 *) (* src = "design.sv:20" *) in_bus[7:1] : _1_;
  assign _2_ = set_lsb ? (* src = "design.sv:24" *) lsb : rez[0];
  assign _3_ = left_shift ? (* full_case = 32'd1 *) (* src = "design.sv:21" *) 1'h0 : _2_;
  assign _0_[0] = ld_in_bus ? (* full_case = 32'd1 *) (* src = "design.sv:20" *) in_bus[0] : _3_;
endmodule

(* src = "design.sv:79" *)
module reg_sign(clk, rst, ld, in, rez);
  (* src = "design.sv:84" *)
  wire _0_;
  (* src = "design.sv:80" *)
  input clk;
  (* src = "design.sv:80" *)
  input in;
  (* src = "design.sv:80" *)
  input ld;
  (* src = "design.sv:81" *)
  output rez;
  reg rez;
  (* src = "design.sv:80" *)
  input rst;
  always @(posedge clk or negedge rst)
    if (!rst)
      rez <= 1'h0;
    else
      rez <= _0_;
  assign _0_ = ld ? (* src = "design.sv:88" *) in : rez;
endmodule
